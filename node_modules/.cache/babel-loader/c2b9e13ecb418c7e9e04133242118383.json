{"ast":null,"code":"var _jsxFileName = \"/home/jam/Desktop/Javascript Projects/covid-19/src/components/Ghana/Ghana.jsx\";\nimport React, { useState, useEffect } from \"react\";\nimport styles from \"./Ghana.module.css\";\nimport { Card, Typography, Grid } from \"@material-ui/core\";\nimport CountUp from \"react-countup\";\nimport cx from \"classnames\";\n\nfunction Ghana({\n  fetchData\n}) {\n  const [info, setInfo] = useState({\n    country: \"ghana\"\n  });\n  const [loading, setLoading] = useState(false);\n  useEffect(() => {\n    async function data() {\n      const results = await fetchData(info.country);\n      setInfo(res => ({ ...res,\n        ...results\n      }));\n    }\n\n    data().catch(error => console.log(\"Error is: \" + error.message));\n  }, [info.country]);\n  const {\n    confirmed,\n    deaths,\n    recovered,\n    lastUpdate\n  } = info;\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: cx(styles.container__first),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: cx(styles.container__last),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 8\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    justify: \"center\",\n    spacing: 3,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 8\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    md: 3,\n    component: Card,\n    className: cx(styles.cards, styles.infected, styles.test1),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    gutterBottom: true,\n    color: \"textSecondary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 11\n    }\n  }, \"Infected\"), /*#__PURE__*/React.createElement(Typography, {\n    variant: \"h5\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 11\n    }\n  }, confirmed === null || confirmed === void 0 ? void 0 : confirmed.value), /*#__PURE__*/React.createElement(Typography, {\n    color: \"textSecondary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 11\n    }\n  }, new Date(lastUpdate).toDateString()), /*#__PURE__*/React.createElement(Typography, {\n    variant: \"body2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 11\n    }\n  }, \"Number of Active cases\")), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    md: 3,\n    component: Card,\n    className: cx(styles.cards, styles.recovered, styles.test1),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    gutterBottom: true,\n    color: \"textSecondary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 11\n    }\n  }, \"Recovered\"), /*#__PURE__*/React.createElement(Typography, {\n    variant: \"h5\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 11\n    }\n  }, recovered === null || recovered === void 0 ? void 0 : recovered.value), /*#__PURE__*/React.createElement(Typography, {\n    color: \"textSecondary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 11\n    }\n  }, new Date(lastUpdate).toDateString()), /*#__PURE__*/React.createElement(Typography, {\n    variant: \"body2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 11\n    }\n  }, \"Number of Recovered cases\")), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    md: 3,\n    component: Card,\n    className: cx(styles.cards, styles.deaths, styles.test1),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    gutterBottom: true,\n    color: \"textSecondary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 11\n    }\n  }, \"Deaths\"), /*#__PURE__*/React.createElement(Typography, {\n    variant: \"h5\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 11\n    }\n  }, deaths === null || deaths === void 0 ? void 0 : deaths.value), /*#__PURE__*/React.createElement(Typography, {\n    color: \"textSecondary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 11\n    }\n  }, new Date(lastUpdate).toDateString()), /*#__PURE__*/React.createElement(Typography, {\n    variant: \"body2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 11\n    }\n  }, \"Number of Death cases\")))));\n}\n\nexport default Ghana;","map":{"version":3,"sources":["/home/jam/Desktop/Javascript Projects/covid-19/src/components/Ghana/Ghana.jsx"],"names":["React","useState","useEffect","styles","Card","Typography","Grid","CountUp","cx","Ghana","fetchData","info","setInfo","country","loading","setLoading","data","results","res","catch","error","console","log","message","confirmed","deaths","recovered","lastUpdate","container__first","container__last","cards","infected","test1","value","Date","toDateString"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from \"react\";\nimport styles from \"./Ghana.module.css\";\nimport { Card, Typography, Grid } from \"@material-ui/core\";\nimport CountUp from \"react-countup\";\nimport cx from \"classnames\";\n\n\n\nfunction Ghana({fetchData}) {\n    const [info, setInfo] = useState({country:\"ghana\"});\n    const [loading, setLoading] = useState(false);\n\n    useEffect(()=>{\n        async function data(){\n            const results = await fetchData(info.country);\n            setInfo(res=>({...res, ...results}))\n        }\n        data()\n        .catch(error=>console.log(\"Error is: \"+error.message))\n    },[info.country])\n\n    const { confirmed, deaths, recovered, lastUpdate } = info;\n\n  return (\n   \n    <div className=\"container\">\n      <div className={cx(styles.container__first)}></div>\n       <div className={cx(styles.container__last)}>\n       <Grid container justify=\"center\" spacing={3}>\n        <Grid\n          item\n          xs={12}\n          md={3}\n          component={Card}\n          className={cx(styles.cards, styles.infected, styles.test1)}\n        >\n          <Typography gutterBottom color=\"textSecondary\">\n            Infected\n          </Typography>\n          <Typography variant=\"h5\">\n          {confirmed?.value}\n            \n          </Typography>\n          <Typography color=\"textSecondary\">\n            {new Date(lastUpdate).toDateString()}\n          </Typography>\n          <Typography variant=\"body2\">Number of Active cases</Typography>\n        </Grid>\n        <Grid\n          item\n          xs={12}\n          md={3}\n          component={Card}\n          className={cx(styles.cards, styles.recovered, styles.test1)}\n        >\n          <Typography gutterBottom color=\"textSecondary\">\n            Recovered\n          </Typography>\n          <Typography variant=\"h5\">\n          {recovered?.value}\n          </Typography>\n          <Typography color=\"textSecondary\">\n            {new Date(lastUpdate).toDateString()}\n          </Typography>\n          <Typography variant=\"body2\">Number of Recovered cases</Typography>\n        </Grid>\n        <Grid\n          item\n          xs={12}\n          md={3}\n          component={Card}\n          className={cx(styles.cards, styles.deaths, styles.test1)}\n        >\n          <Typography gutterBottom color=\"textSecondary\">\n            Deaths\n          </Typography>\n          <Typography variant=\"h5\">\n          {deaths?.value}\n          </Typography>\n          <Typography color=\"textSecondary\">\n            {new Date(lastUpdate).toDateString()}\n          </Typography>\n          <Typography variant=\"body2\">Number of Death cases</Typography>\n        </Grid>\n      </Grid>\n       </div>\n    \n    </div>\n  );\n}\n\nexport default Ghana;\n"]},"metadata":{},"sourceType":"module"}